type GovernanceFramework @entity {
  "Governance framework contract address"
  id: String!
  "Name of the governance framework"
  name: String!
  "Type of governance framework"
  type: GovernanceFrameworkType!

  "The contract address associated with the governance token used for voting on the governance framework proposals"
  tokenAddress: String!
  "Total Supply of token"
  totalTokenSupply: BigInt!
  "Number of token holders currently"
  currentTokenHolders: BigInt!
  "Number of delegates participating on the governance currently"
  totalDelegates: Int!

  "MKR locked in chief i.e. total voting power"
  currentTokenLockedInChief: BigInt!
  "Amount of voting power delegated"
  currentTokenDelegated: BigInt!
  "Current spell that is the 'hat'"
  currentHat: Spell
  "Total number of spells created"
  spells: Int!
}

enum GovernanceFrameworkType {
  GovernorAlpha
  GovernorBravo
  OZGovernor
  AaveGovernanceV2
  MakerGovernance
}

type Slate @entity {
  "Unique Slate ID, produced by hashing the addresses in the slate"
  id: ID!
  "Transaction hash of the Slate creation"
  txnHash: String!
  "Block number slate was created "
  creationBlock: BigInt!
  "Timestamp of block slate was created in"
  creationTime: BigInt!

  "Spells that are on this slate"
  yays: [Spell!]!
}

# Also referred to as Executive Proposal
type Spell @entity {
  "Spell's contract address"
  id: ID!
  "Spell description"
  description: String!
  "State of the spell"
  state: SpellState!
  "Governance Framework that spell is part of"
  governanceFramework: GovernanceFramework!

  "Block number spell was created in"
  creationBlock: BigInt!
  "Timestamp of block spell was created in"
  creationTime: BigInt!
  "Timestamp of spell expiry"
  expiryTime: BigInt!
  "Transaction hash of Spell lift"
  liftedTxnHash: String
  "Block number spell was lifted in"
  liftedBlock: BigInt
  "Timestamp of Spell lift"
  liftedTime: BigInt
  "Voting power when lifted"
  liftedWith: BigInt
  "Transaction hash of Spell scheduled"
  scheduledTxnHash: String
  "Block number spell was scheduled in"
  scheduledBlock: BigInt
  "Timestamp of Spell scheduled"
  scheduledTime: BigInt
  "Transaction hash of Spell cast"
  castTxnHash: String
  "Block number spell was cast in"
  castBlock: BigInt
  "Timestamp of Spell cast"
  castTime: BigInt
  "Voting power when cast"
  castWith: BigInt
  "Number of votes for the Spell"
  totalVotes: BigInt!
  "Weighted voting power for the Spell"
  totalWeightedVotes: BigInt!

  "Votes associated to this spell"
  votes: [ExecutiveVote!]! @derivedFrom(field: "spell")
}

enum SpellState {
  ACTIVE
  LIFTED
  SCHEDULED
  CAST
}

type DelegateAdmin @entity {
  "A delegate admin is an address that controls a delegate contract"
  id: String!

  "Delegate contracts addresses"
  delegateContract: Delegate!
}

type Delegate @entity {
  "A delegate is a contract owned by an address, Id is the address of the delegate contract"
  id: String!

  ownerAddress: String!

  "Delegations that this contract has received"
  delegations: [Delegation!]!

  "Delegation history"
  delegationHistory: [DelegationHistory!]!

  "Total amount delegated"
  totalDelegated: BigInt!

  "Number of token holders delegate represents"
  delegators: Int!

  "Transaction hash of delegate contract creation"
  txnHash: String!

  "Block time change happened"
  blockTimestamp: BigInt!

  "Block number of event"
  blockNumber: BigInt!

  metadata: DelegateMetadata!
}

type VoteProxy @entity {
  "A proxy is a contract owned by an address, Id is the address of the proxy contract"
  id: String!

  hot: String!

  cold: String!
}

type Voter @entity {
  "A Voter is any address that has participated in governance, a proxy contract or a delegate contract"
  id: String!

  "Is a vote delegate contract"
  isVoteDelegate: Boolean
  "Is a vote proxy contract"
  isVoteProxy: Boolean

  "Delegate admin is the address that controls a Vote Delegate contract"
  delegateContract: Delegate

  "Proxy contract"
  proxyContract: VoteProxy

  "Voter voting power expressed in the smallest unit of the token"
  mkrLockedInChiefRaw: BigInt!

  "Voter voting power expressed as a BigDecimal normalized value"
  mkrLockedInChief: BigDecimal!

  "Current slate of spells voter is voting for"
  currentSpells: [Spell!]!

  "Votes that a voter has made in different spells"
  executiveVotes: [ExecutiveVote!]! @derivedFrom(field: "voter")

  "Number of spells voted on"
  numberExecutiveVotes: Int!

  "Poll votes associated to this spell"
  pollVotes: [PollVote!]! @derivedFrom(field: "voter")

  "Number of spells voted on"
  numberPollVotes: Int!
}

type Delegation @entity {
  "delegate-delegator"
  id: String!
  "Address of the delegator"
  delegator: String!
  "Total amount delegated"
  amount: BigInt!
  "Last time updated"
  timestamp: BigInt!
  "Delegate contract"
  delegate: Delegate!
}

type DelegationHistory @entity {
  "delegate-delegator-date"
  id: String!
  "Address of the delegator"
  delegator: String!
  "Change in total amount, can be negative"
  amount: BigInt!
  "Accumulated total amount"
  accumulatedAmount: BigInt!
  "Time it happened"
  timestamp: BigInt!
  "Block number"
  blockNumber: BigInt!
  "Transaction hash"
  txnHash: String!
  "Delegate contract"
  delegate: Delegate!
}

type ExecutiveVotingPowerChange @entity(immutable: true) {
  "Unique entity used to keep track of voting power delta"
  id: ID!
  "Token addresss"
  tokenAddress: String
  "Token address for voter"
  voter: String!
  "Sender of the voting power change transaction"
  previousBalance: BigInt!
  "New voting power of delegate"
  newBalance: BigInt!
  "amount can be negative or positive"
  amount: BigInt!
  "Block time change happened"
  blockTimestamp: BigInt!
  "Transaction hash of the voting power change"
  txnHash: String!
  "Log index for delegate voting power change"
  logIndex: BigInt!
  "Block number of event"
  blockNumber: BigInt!
}

type ExecutiveVote @entity {
  "Voter ID + spell ID"
  id: ID!
  "Voting weight expressed in the vote"
  weight: BigInt!
  "Reason for voting choice"
  reason: String
  "Voter that emitted the vote"
  voter: Voter!
  "spell that is being voted on"
  spell: Spell!

  "Block number vote is cast in"
  block: BigInt!
  "Timestamp of block vote was cast in"
  blockTime: BigInt!
  "Transaction hash of the vote"
  txnHash: String!
  "Log index for event"
  logIndex: BigInt!
}

# Polling Entities
type PollVote @entity {
  "Voter ID + Poll ID"
  id: String!
  "Voting weight expressed in the vote"
  choice: BigInt!
  "Voter that emitted the vote"
  voter: Voter!
  "Poll that is being voted on"
  poll: Poll!

  "Block number vote is cast in"
  block: BigInt!
  "Timestamp of block vote was cast in"
  blockTime: BigInt!
  "Transaction hash of the vote"
  txnHash: String!
}

type DelegateMetadata @entity {
  "Delegate contract address"
  id: String!
  "Delegate name"
  name: String!
  "Delegate description"
  description: String!
  "Delegate image"
  image: String!
  "Delegate external profile URL"
  externalProfileURL: String!
  "Delegate tags"
  tags: [DelegateTags!]!
  "Metrics"
  metrics: DelegateMetrics!
  "Core unit member"
  coreUnitMember: Boolean!
}

type DelegateMetrics @entity {
  "Delegate contract address"
  id: String!
  combinedParticipation: BigDecimal!
  pollParticipation: BigDecimal!
  executiveParticipation: BigDecimal!
  communication: BigDecimal!
}

type Poll @entity {
  "Poll's id"
  id: String!
  "Poll votes associated to this spell"
  pollVotes: [PollVote!]! @derivedFrom(field: "poll")
}

type ContentHashRegistry @entity {
  id: ID!
  blockNumber: Int!
  transactionID: Bytes!
  hash: Bytes!
  address: Bytes!
  node: Bytes!
  nodeHexString: String!
  hashHexString: String!
}

type VotingStrategy @entity {
  id: ID!
  name: String!
  description: String!
  delegates: [Delegate!]!
}

type VotingCommittee @entity {
  id: ID!
  name: String!
  description: String!
  image: String!
  externalProfileURL: String!
  strategies: [VotingStrategy!]!
}

type DelegateTags @entity {
  id: ID!
  shortName: String!
  longName: String!
  description: String!
}
